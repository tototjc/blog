---
import GeneralLayout from '@/layouts/General.astro'

import SearchIcon from '@/components/icons/search.svg'
---

<GeneralLayout title="Search">
  <search>
    <label>
      <SearchIcon class="icon" />
      <input data-search-input type="search" placeholder="Search" autocomplete="off" />
    </label>
    <ul data-search-results></ul>
  </search>
</GeneralLayout>

<script>
  import { Instance, Input, ResultList } from '@pagefind/modular-ui'

  type ResultInfo = { url: string; excerpt: string; [key: string]: unknown }

  type ResultMeta = { title: string; [key: string]: unknown }

  type SubResult = ResultInfo & ResultMeta

  type Result = ResultInfo & { meta: ResultMeta; sub_results: SubResult[] }

  const isResult = (obj: Result | SubResult): obj is Result => 'sub_results' in obj

  const renderResult = (result: Result | SubResult) => {
    const notSub = isResult(result)
    const link = document.createElement('a')
    link.href = result.url
    link.textContent = notSub ? result.meta.title : result.title
    const excerpt = document.createElement('p')
    excerpt.innerHTML = result.excerpt
    const item = document.createElement('li')
    item.append(link, excerpt)
    if (notSub) {
      const subList = document.createElement('ul')
      subList.append(...result.sub_results.map(renderResult))
      item.append(subList)
    }
    return item
  }

  const initSearch = () => {
    const instance = new Instance({ bundlePath: `${import.meta.env.BASE_URL}search/` })
    instance.add(new Input({ inputElement: 'search input[type="search"][data-search-input]' }))
    instance.add(
      new ResultList({
        containerElement: 'search ul[data-search-results]',
        placeholderTemplate: () => document.createElement('li'),
        resultTemplate: renderResult,
      }),
    )
  }

  window.addEventListener('search:init', initSearch)

  window.addEventListener('DOMContentLoaded', initSearch, { once: true })
</script>

<script is:inline data-astro-rerun>
  window.dispatchEvent(new Event('search:init'))
</script>

<style>
  search {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin: 1.5rem;

    label {
      display: flex;
      place-items: center;
      place-content: start;
      gap: 1rem;
      color: var(--c-text);
      font-size: 1.1rem;
      border-bottom: 0.1rem solid currentcolor;
      padding: 0.75rem 1rem;
      overflow: hidden;

      svg {
        flex: 0 0 auto;
        stroke: currentcolor;
        transition: transform 0.2s ease-in-out;
      }

      input {
        flex: 1 1 auto;
        border: none;
        outline: none;
        background: none;
        color: currentcolor;
        font: inherit;

        &::placeholder {
          color: var(--c-text-bland);
        }

        &:focus::placeholder {
          visibility: hidden;
        }
      }

      &:focus-within {
        outline: auto;
        border-radius: 0.5rem;

        svg {
          transform: scale(1.2);
        }
      }
    }
  }
</style>

<style is:global>
  search ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    color: var(--c-text);
    padding: 0.5rem;

    li {
      a {
        font-size: 1.1rem;
        font-weight: 500;
      }

      :where(a:hover) {
        text-decoration: underline;
      }

      p {
        font-size: 0.8rem;
        font-weight: 400;
        overflow-wrap: break-word;
        border-inline-start: 0.2em solid var(--c-text-bland);
        padding-inline-start: 0.5em;

        mark {
          color: currentcolor;
          background: #ee8;
          text-decoration: underline wavy currentcolor 0.1rem;
          text-underline-offset: 0.15rem;
        }
      }
    }

    li & {
      gap: 0.5rem;
      margin-inline: 0.5rem;

      li {
        padding-inline-start: 0.5rem;

        &::marker {
          content: 'â¤·';
          font-size: 1.1rem;
          font-weight: 600;
        }

        a {
          font-size: 0.9rem;
        }
      }
    }
  }
</style>
